// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package services

import (
	models "go-challenge/internals/models"

	mock "github.com/stretchr/testify/mock"
)

// Importation is an autogenerated mock type for the Importation type
type Importation struct {
	mock.Mock
}

// GetFilenames provides a mock function with given fields:
func (_m *Importation) GetFilenames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportFiles provides a mock function with given fields: _a0
func (_m *Importation) ImportFiles(_a0 []models.Import) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]models.Import) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ToBeImported provides a mock function with given fields: _a0
func (_m *Importation) ToBeImported(_a0 []string) ([]models.Import, error) {
	ret := _m.Called(_a0)

	var r0 []models.Import
	if rf, ok := ret.Get(0).(func([]string) []models.Import); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Import)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
