// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package repository

import (
	models "go-challenge/internals/models"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Product is an autogenerated mock type for the Product type
type Product struct {
	mock.Mock
}

// GetOne provides a mock function with given fields: filter
func (_m *Product) GetOne(filter interface{}) (*models.Product, error) {
	ret := _m.Called(filter)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(interface{}) *models.Product); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCode provides a mock function with given fields: _a0
func (_m *Product) GetProductByCode(_a0 string) (*models.Product, error) {
	ret := _m.Called(_a0)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(string) *models.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: _a0
func (_m *Product) GetProductByID(_a0 primitive.ObjectID) (*models.Product, error) {
	ret := _m.Called(_a0)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *models.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: filter, page, size
func (_m *Product) GetProducts(filter interface{}, page int, size int) ([]models.Product, error) {
	ret := _m.Called(filter, page, size)

	var r0 []models.Product
	if rf, ok := ret.Get(0).(func(interface{}, int, int) []models.Product); ok {
		r0 = rf(filter, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, int, int) error); ok {
		r1 = rf(filter, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertManyProducts provides a mock function with given fields: _a0, _a1
func (_m *Product) InsertManyProducts(_a0 []interface{}, _a1 mongo.Session) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]interface{}, mongo.Session) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: filter, data
func (_m *Product) UpdateOne(filter interface{}, data interface{}) error {
	ret := _m.Called(filter, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) error); ok {
		r0 = rf(filter, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductByCode provides a mock function with given fields: _a0, _a1
func (_m *Product) UpdateProductByCode(_a0 string, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductByID provides a mock function with given fields: _a0, _a1
func (_m *Product) UpdateProductByID(_a0 primitive.ObjectID, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
